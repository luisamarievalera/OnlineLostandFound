<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1,">
  <link rel="icon" href="https://www.tip.edu.ph/assets/Uploads/TIP-INFORMAL-LOGO-04-2.png">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link rel="stylesheet" type="text/css" href="/css/style.css">
  <title>Dashboard | Office of Student Affairs</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js">
  
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.66/pdfmake.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.66/vfs_fonts.js"></script>

<style>
  body {
      padding-top: 0;
      padding-bottom: 4rem;
    }

    .main-content {
      padding: 3px;
    }
  .content {
    background-color: #f4f4f4;
    padding-top: 8rem;
    padding-left: 3rem;
    padding-right: 3rem;    
  }

  .content h1{
    padding-bottom: 2rem;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
  }
  .container {
      display: inline-flex;
      padding-bottom: 20px;
      padding-left: 0;

    }
    .scrollable-list {
      height: 550px; 
      overflow:auto;
      background-color: #444;
      padding: 10px;
      border: 1px solid #555;
    }

    .scrollable-list::-webkit-scrollbar {
      width: 5px; 
    }

    .scrollable-list::-webkit-scrollbar-thumb {
      background-color: #666;
      border-radius: 10px;
    }

    .scrollable-list::-webkit-scrollbar-thumb:hover {
      background-color: #555;
    }

  .button {
    display: flex;
    gap: 5px;
  }
  .button:not(:last-child) {
    margin-bottom: 10px;
  }
  .button i {
    margin-top: 10px;
    color: #505050;
  }
  .graph-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(2, 1fr);
    gap: 20px;
    margin-top: -10px;
    background-color: #f4f4f4;
  }
  .graph {
    border-radius: 5px;
    padding: 5px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    height: 250px;
    border-style: solid;
    border-width: thin;
  }

  .main-graph {
    padding-top: 30px;
    background-color: #f4f4f4;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    height: 500px;
  }
  .graph-grid h5 {
    font-size: 18px;
    background-color: #f4f4f4;
  }
  .content footer {
    padding-bottom: 3rem;
    background-color: #f4f4f4;
  }
  .item-summary {
  display: flex;
  justify-content: space-around;
  background-color: grey;
  border-radius: 50px 50px 0px 0px;
  padding: 10px;
}

.summary-item {
  text-align: center;
  color: #fff;
}

.summary-value {
  font-size: 24px;
  font-weight: bold;
}

.summary-label {
  font-size: 16px;
  margin-top: 10px;
}
.list-group-item {
      background-color: #555;
      border: 1px solid #666;
      margin-bottom: 10px;
      color: #fff;
}

.list-group-item strong {
  color: #fff;
}
    .tag-lost {
      background-color: #e74c3c; /* Red for lost items */
    }

    .tag-found {
      background-color: #2ecc71; /* Green for found items */
    }
</style>
</head>

<body>
  <%- include('admin-navbar') %>
  <div class="content">
    <div class="main-content">
      <h1 class="text-dark">Dashboard</h1>
      <div class="item-summary">
        <div class="summary-item">
          <span class="summary-value" id="totalItems"><%= totalItems %></span>
          <span class="summary-label">Total Items</span>
        </div>
        <div class="summary-item">
          <span class="summary-value" id="foundItems"><%= foundItems %></span>
          <span class="summary-label">Found Items</span>
        </div>
        <div class="summary-item">
          <span class="summary-value" id="lostItems"><%= lostItems %></span>
          <span class="summary-label">Lost Items</span>
        </div>
        <div class="summary-item">
          <span class="summary-value" id="claimedItems"><%= totalClaimedItems %></span>
          <span class="summary-label">Claimed Items</span>
       </div>
        <div class="summary-item">
          <span class="summary-value" id="totalUsers"><%= totalUsers %></span>
          <span class="summary-label">Total Users</span>
        </div>
      </div>
      <div class="item-summary" style="border-radius: 0; display: flex; justify-content: space-between; align-items: center; padding: 0.5em 6.3em; border-radius: 0px, 0px, 50px, 50px;">
        <div class="summary-item"></div>
        <div class="summary-item" style="display: flex; align-items: center;">
          <label for="start" style="font-size: 1rem; font-weight: 600; padding-right: 3px;">Start </label>
          <input type="date" name="start" id="start" class="form-control" style="margin-right: 0.8em;">
          <label for="end" style="font-size: 1rem; font-weight: 600; padding-right: 3px;">End </label>
          <input type="date" name="end" id="end" class="form-control" style="margin-right: 0.8em;">
          <button class="btn btn-warning" type="button" id="generateReport">
            Generate Report
          </button>
          <div class="dropdown">
            <button class="btn btn-warning dropdown-toggle" type="button" id="generateReportDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            </button>
            <div class="dropdown-menu" aria-labelledby="generateReportDropdown">
              <a class="dropdown-item" href="#" id="generateWeekly">Generate Weekly Report</a>
              <a class="dropdown-item" href="#" id="generateMonthly">Generate Monthly Report</a>
              <a class="dropdown-item" href="#" id="generateSemestral">Generate Semestral Report</a>
              <a class="dropdown-item" href="#" id="generateDepartment">Generate Report per Department</a>
              <a class="dropdown-item" href="#" id="generateCategory">Generate Report per Category</a>
            </div>
          </div>
        </div>
        <div class="summary-item"></div>
      </div>

      <div class="main-graph">
        <div class="graph-grid">
          <center>
            <h5>Category with Highest and Lowest Reported Lost Items</h5>
            <div class="graph">
              <canvas id="barChart"></canvas>
            </div>
          </center>
          <center>
            <h5>Category with Highest and Lowest Reported Found Items</h5>
            <div class="graph">
              <canvas id="barChartFound"></canvas>
            </div>
          </center>  
          <center>
            <h5>Pending vs. Claimed Items vs Archived</h5>
            <div class="graph">
                <canvas id="pieChart"></canvas>
            </div>
          </center>
          <center>
            <h5>Department with highest lost and found Items</h5>
            <div class="graph">
              <canvas id="departmentChart"></canvas>
            </div>
          </center>
        </div>
        <br>
        <hr>
          <div class="row">
            <div class="col-md-4">
              <h2 style="font-weight: bolder;">History</h2>
              <div class="scrollable-list">
                <ul class="list-group">
                <% 
                  let combinedItems = [];
                  if (data.lost && data.lost.length > 0) {
                    combinedItems = combinedItems.concat(data.lost.map(item => ({ ...item, type: 'Lost' })));
                  }
                  if (data.found && data.found.length > 0) {
                    combinedItems = combinedItems.concat(data.found.map(item => ({ ...item, type: 'Found' })));
                  }
                  
                  combinedItems.sort((a, b) => new Date(b.datetime) - new Date(a.datetime));
                  
                  combinedItems.forEach(item => { 
                    if (item.status == "Archived" || item.status == "Claimed"){
                  %>
                    <li class="list-group-item">
                      <div class="tag-<%= item.type.toLowerCase() %>">  
                        <center><strong><%= item.type %> Item</strong></center>
                      </div>
                      <strong>Item Name:</strong> <%= item.objTitle %><br>
                      <strong>Category:</strong> <%= item.category %><br>
                      <strong>Date Found:</strong> <%= item.datetime %><br>
                      <strong>Department:</strong> <%= item.department %><br>
                      <strong>Reported By:</strong> <%= item.firstName %><br>
                      <strong>Claimed By:</strong> <%= item.retrievedBy %><br>
                      <strong>Date Claimed:</strong> <%= item.retrieveDate %><br>
                      <strong>Status:</strong> <%= item.status%><br>
                    </li>
                  <% }}); 
                %>
                </ul>
              </div>
            </div>
            <div class="col-md-8">
              <center>
                <h5>Weekly Lost and Found Items</h5>
                <div class="graph">
                    <canvas id="lineChart" style="width:1800px;height:480px"></canvas>
                </div>
              </center>
              <br>
              <center>
                <h5>Monthly Lost and Found Items</h5>
                <div class="graph">
                    <canvas id="lineChartMonthly" style="width:1800px;height:480px"></canvas>
                </div>
              </center>
            </div>
          </div>
        <footer class="footer bg-light">
          <p><center><span>&copy; 2023 Office of Student Affairs Technological Institute of the Philippines, Manila</span> <a href="#"><i class="fas fa-arrow-up fa-lg" style="color: #ffd43b;"></i></a></p></center>
        </footer>
      </div>
    </div>
  </div>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    var categories = <%- JSON.stringify(categories) %>;
    var lostCounts = <%- JSON.stringify(lostCounts) %>;
      
    var barData = {
      labels: categories,
      datasets: [{
        data: lostCounts,
        backgroundColor: ['#3498db', 'pink', '#2ecc71', '#9b59b6', 'grey', 'brown', 'orange'],
      }]
    };
      
    var barChart = new Chart(document.getElementById('barChart'), {
      type: 'bar',
      data: barData,
    });

    var barChartFoundData = <%- JSON.stringify(barChartFoundData) %>;

    var barChartFound = new Chart(document.getElementById('barChartFound'), {
      type: 'bar',
      data: barChartFoundData,
    });

    var weeklyData = <%- JSON.stringify(weeklyChartData) %>;
    var dates = weeklyData.map(item => item.date);
    var lostData = weeklyData.map(item => item.lost);
    var foundData = weeklyData.map(item => item.found);

    var lineData = {
      labels: dates,
      datasets: [
        {
          label: 'Lost Items',
          borderColor: '#e74c3c',
          data: lostData,
        },
        {
          label: 'Found Items',
          borderColor: '#2ecc71',
          data: foundData,
        },
      ],
    };

    var lineChart = new Chart(document.getElementById('lineChart'), {
      type: 'line',
      data: lineData,
    });

    var monthlyData = <%- JSON.stringify(monthlyChartData) %>;
    var monthlyMonths = monthlyData.map(item => item.month);
    var monthlyLostData = monthlyData.map(item => item.lost);
    var monthlyFoundData = monthlyData.map(item => item.found);

    var lineChartMonthlyData = {
      labels: monthlyMonths,
      datasets: [
        {
          label: 'Lost Items',
          borderColor: '#e74c3c',
          data: monthlyLostData,
        },
        {
          label: 'Found Items',
          borderColor: '#2ecc71',
          data: monthlyFoundData,
        },
      ],
    };

    var lineChartMonthly = new Chart(document.getElementById('lineChartMonthly'), {
      type: 'line',
      data: lineChartMonthlyData,
    });

    var totalPendingItems = <%= totalPendingItems %>;
    var totalClaimedItems = <%= totalClaimedItems %>;
    var totalArchivedItems = <%= totalArchivedItems %>;

      var pieData = {
        labels: ['Pending Items', 'Claimed Items', 'Archived'],
        datasets: [{
          data: [totalPendingItems, totalClaimedItems, totalArchivedItems],
          backgroundColor: ['orange', '#2ecc71','black']
        }]
      };

      var pieChart = new Chart(document.getElementById('pieChart'), {
        type: 'doughnut',
        data: pieData
      });

      var combinedDepartments = <%- JSON.stringify(combinedDepartments) %>;
        var departmentData = {
            labels: Object.keys(combinedDepartments),
            datasets: [{
                label: 'Lost Items',
                data: Object.values(combinedDepartments).map(data => data.lost || 0),
                backgroundColor: '#e74c3c',
            }, {
                label: 'Found Items',
                data: Object.values(combinedDepartments).map(data => data.found || 0),
                backgroundColor: '#2ecc71',
            }]
        };

        var departmentChart = new Chart(document.getElementById('departmentChart'), {
            type: 'bar',
            data: departmentData,
            options: {
              indexAxis: 'y',
                scales: {
                    x: {
                        beginAtZero: true,
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    let combinedItems = []; 
    const totalItems = document.getElementById("totalItems").textContent;
    const foundItems = document.getElementById("foundItems").textContent;
    const lostItems = document.getElementById("lostItems").textContent;
    const totalClaimedItems = document.getElementById("claimedItems").textContent;

    document.getElementById("generateReport").addEventListener("click", function () {
      let startDate = new Date(document.getElementById("start").value)
      let endDate = new Date(document.getElementById("end").value)

    let allData = <%- JSON.stringify(data) %>.lost.concat(<%- JSON.stringify(data) %>.found)
      .filter(item => new Date(item.datetime) >= startDate && new Date(item.datetime) <= endDate);
      
      allData = allData.reduce((acc, curr) => {
          const existingItemIndex = acc.findIndex(item => new Date(item.date).toDateString() === new Date(curr.datetime).toDateString());

          if (existingItemIndex === -1) {
              acc.push({ date: new Date(curr.datetime).toDateString(), lost: curr.type == "lost" ? 1 : 0, found: curr.type == "found" ? 1 : 0 });
          } else {
            if (curr.type == "lost") {
              acc[existingItemIndex].lost++;
            } else {
              acc[existingItemIndex].found++;
            }
          }

          return acc;
      }, []).sort((a, b) => new Date(a.date) - new Date(b.date));
      console.log(allData)
      
      const docDefinition = {
      content: [
        {
          text: "TECHNOLOGICAL INSTITUTE OF THE PHILIPPINES - OFFICE OF STUDENT AFFAIRS\n",
          style: "header",
          bold: true,
          fontSize: 16,
          alignment: "center",
        },
        {
          text: `Custom Report`,
          style: "subheader",
          alignment: "center",
        },
        {
          text: `(${startDate.toDateString()} TO ${endDate.toDateString()})\n\n\n`,
          style: "subheader",
          fontSize: 8,
          alignment: "center",
        },
        {canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 1 } ]},
        {
          text: "\nList of Items:",
          style: "subheader",
          margin: [0, 10, 0, 5],
        },
        {
          table: {
            headerRows: 1,
            widths: ['auto', 'auto', 'auto', 'auto', 'auto'],
            body: [
              ['Date', 'Lost Item/s', 'Found Item/s', 'Lost Item Details', 'Found Item Details'],
              ...allData.map(item => {
                return ([
                  item.date,
                  item.lost,
                  item.found,
                  getItemsDetails('Lost', item.date),
                  getItemsDetails('Found', item.date),
                ])}
              ),
            ],
          },
        },
        { text: `\n\nTotal Lost Items: ${allData.reduce((sum, item) => sum + item.lost, 0)}` },
        { text: `Total Found Items: ${allData.reduce((sum, item) => sum + item.found, 0)}` },
        {
          text: "\n\n\n_____________________________",
          style: "subheader",
        },
        {
          text: "Generated by: <%=user.name%>",
          style: "subheader",
        },
        
      ],

      footer: function (currentPage, pageCount) {
        return {
          text: `Page ${currentPage.toString()} of ${pageCount}`,
          alignment: "center",
          margin: [0, 10],
        };
      },
    };

    pdfMake.createPdf(docDefinition).download("report.pdf");

    function getItemsDetails(type, date) {
      const items = <%- JSON.stringify(data) %>;
      const filteredItems = items[type.toLowerCase()].filter(item => new Date(item.datetime).toDateString() === new Date(date).toDateString());
      const details = filteredItems.map(item => `Name: ${item.objTitle}\n Category: ${item.category}\n Department: ${item.department}`).join('\n\n');
      return details;
    }
  });

  document.getElementById("generateWeekly").addEventListener("click", function () {
    const endDate = new Date();
    const startDate = new Date(endDate);
    startDate.setDate(endDate.getDate() - 6);

    const weeklyData = <%- JSON.stringify(weeklyChartData) %>
      .filter(item => new Date(item.date) >= startDate && new Date(item.date) <= endDate);

    const docDefinition = {
      content: [
        {
          text: "TECHNOLOGICAL INSTITUTE OF THE PHILIPPINES - OFFICE OF STUDENT AFFAIRS\n",
          style: "header",
          bold: true,
          fontSize: 16,
          alignment: "center",
        },
        {
          text: "Weekly Report (Last 7 Days)\n\n\n",
          style: "subheader",
          alignment: "center",
        },
        {canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 1 } ]},
        {
          text: "\nList of Items:",
          style: "subheader",
          margin: [0, 10, 0, 5],
        },
        {
          table: {
            headerRows: 1,
            widths: ['auto', 'auto', 'auto', 'auto', 'auto'],
            body: [
              ['Date', 'Lost Item/s', 'Found Item/s', 'Lost Item Details', 'Found Item Details'],
              ...weeklyData.map(item => [
                item.date,
                item.lost,
                item.found,
                getItemsDetails('Lost', item.date),
                getItemsDetails('Found', item.date),
              ]),
            ],
          },
        },
        { text: `\n\nTotal Lost Items: ${weeklyData.reduce((sum, item) => sum + item.lost, 0)}` },
        { text: `Total Found Items: ${weeklyData.reduce((sum, item) => sum + item.found, 0)}` },
        {
          text: "\n\n\n_____________________________",
          style: "subheader",
        },
        {
          text: "Generated by: <%=user.name%>",
          style: "subheader",
        },
      ],
      footer: function (currentPage, pageCount) {
        return {
          text: `Page ${currentPage.toString()} of ${pageCount}`,
          alignment: "center",
          margin: [0, 10],
        };
      },
    };

    pdfMake.createPdf(docDefinition).download("weekly-report.pdf");

    function getItemsDetails(type, date) {
      const items = <%- JSON.stringify(data) %>;
      const filteredItems = items[type.toLowerCase()].filter(item => new Date(item.datetime).toDateString() === new Date(date).toDateString());
      const details = filteredItems.map(item => `Name: ${item.objTitle}\n Category: ${item.category}\n Department: ${item.department}`).join('\n\n');
      return details;
    }
  });

document.getElementById("generateMonthly").addEventListener("click", function () {
  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(endDate.getDate() - 30);
  const monthlyData = <%- JSON.stringify(monthlyData) %>
    .filter(item => new Date(item.date) >= startDate && new Date(item.date) <= endDate);

  const docDefinition = {
    content: [
      {
          text: "TECHNOLOGICAL INSTITUTE OF THE PHILIPPINES - OFFICE OF STUDENT AFFAIRS",
          style: "header",
          bold: true,
          fontSize: 16,
          alignment: "center",
      },
      {
        text: "Monthly Report (Last 30 Days)\n\n\n",
        style: "subheader",
        alignment: "center",
      },
      {canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 1 } ]},
      {
        text: "\nList of Items:",
        style: "subheader",
        margin: [0, 10, 0, 5],
      },
      {
        table: {
          headerRows: 1,
          widths: ['auto', 'auto', 'auto', 'auto', 'auto'],
          body: [
            ['Date', 'Lost Item/s', 'Found Item/s', 'Lost Item Details', 'Found Item Details'],
            ...monthlyData.map(item => [
              item.date,
              item.lost,
              item.found,
              getItemsDetails('Lost', item.date),
              getItemsDetails('Found', item.date),
            ]),
          ],
        },
      },
      { text: `\n\nTotal Lost Items: ${monthlyData.reduce((sum, item) => sum + item.lost, 0)}` },
      { text: `Total Found Items: ${monthlyData.reduce((sum, item) => sum + item.found, 0)}` },
        {
          text: "\n\n\n_____________________________",
          style: "subheader",
        },
        {
          text: "Generated by: <%=user.name%>",
          style: "subheader",
        },
    ],
    footer: function (currentPage, pageCount) {
      return {
        text: `Page ${currentPage.toString()} of ${pageCount}`,
        alignment: "center",
        margin: [0, 10],
      };
    },
  };

  pdfMake.createPdf(docDefinition).download("monthly-report.pdf");

  function getItemsDetails(type, date) {
    const items = <%- JSON.stringify(data) %>;
    const filteredItems = items[type.toLowerCase()].filter(item => new Date(item.datetime).toDateString() === new Date(date).toDateString());
    const details = filteredItems.map(item => `Name: ${item.objTitle}\n Category: ${item.category}\n Department: ${item.department}`).join('\n\n');
    return details;
  }
});


  document.getElementById("generateSemestral").addEventListener("click", function () {
    const endDate = new Date();
    const startDate = new Date();
    startDate.setMonth(endDate.getMonth() - 6);

    const semestralData = <%- JSON.stringify(monthlyChartData) %>
        .filter(item => new Date(item.month) >= startDate && new Date(item.month) <= endDate);

    const docDefinition = {
        content: [
            {
              text: "TECHNOLOGICAL INSTITUTE OF THE PHILIPPINES - OFFICE OF STUDENT AFFAIRS",
              style: "header",
              bold: true,
              fontSize: 16,
              alignment: "center",
            },
            {
                text: "Semestral Report (Last 6 Months)\n\n\n",
                style: "subheader",
                alignment: "center",
            },
            {canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 1 } ]},
            {
                text: "\nList of Items:",
                style: "subheader",
                margin: [0, 10, 0, 5],
            },
            {
                table: {
                    headerRows: 1,
                    widths: ['auto', 'auto', 'auto', 'auto', 'auto'],
                    body: [
                        ['Month', 'Lost Item/s', 'Found Item/s', 'Lost Item Details', 'Found Item Details'],
                        ...semestralData.map(item => [
                            item.month,
                            item.lost,
                            item.found,
                            getItemsDetails('Lost', item.month),
                            getItemsDetails('Found', item.month),
                        ]),
                    ],
                },
            },
            { text: `\n\nTotal Lost Items: ${semestralData.reduce((sum, item) => sum + item.lost, 0)}` },
            { text: `Total Found Items: ${semestralData.reduce((sum, item) => sum + item.found, 0)}` },
        {
          text: "\n\n\n_____________________________",
          style: "subheader",
        },
        {
          text: "Generated by: <%=user.name%>",
          style: "subheader",
        },
        ],
        footer: function (currentPage, pageCount) {
            return {
                text: `Page ${currentPage.toString()} of ${pageCount}`,
                alignment: "center",
                margin: [0, 10],
            };
        },
    };

    pdfMake.createPdf(docDefinition).download("semestral-report.pdf");

    function getItemsDetails(type, month) {
        const items = <%- JSON.stringify(data) %>;
        const filteredItems = items[type.toLowerCase()].filter(item => new Date(item.datetime).getMonth() === new Date(month).getMonth());
        const details = filteredItems.map(item => `Name: ${item.objTitle}\n Category: ${item.category}\n Department: ${item.department}`).join('\n\n');
        return details;
    }
  });

  document.getElementById("generateDepartment").addEventListener("click", function () {
    const departmentData = <%- JSON.stringify(combinedDepartments) %>;

    const docDefinition = {
        content: [
            {
              text: "TECHNOLOGICAL INSTITUTE OF THE PHILIPPINES - OFFICE OF STUDENT AFFAIRS",
              style: "header",
              bold: true,
              fontSize: 16,
              alignment: "center",
            },
            {
                text: "Departmental Report\n\n\n",
                style: "subheader",
                alignment: "center",
            },
            {canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 1 } ]},
            {
                text: "\nList of Items:",
                style: "subheader",
                margin: [0, 10, 0, 5],
            },
            {
                table: {
                    headerRows: 1,
                    widths: ['auto', 'auto', 'auto', 'auto', 'auto'],
                    body: [
                        ['Department', 'Lost Item/s', 'Found Item/s', 'Lost Item Details', 'Found Item Details'],
                        ...Object.entries(departmentData).map(([department, data]) => [
                            department,
                            data.lost || 0,
                            data.found || 0,
                            getItemsDetails('Lost', department),
                            getItemsDetails('Found', department),
                        ]),
                    ],
                },
            },
            { text: `\n\nTotal Lost Items: ${Object.values(departmentData).reduce((sum, department) => sum + (department.lost || 0), 0)}` },
            { text: `Total Found Items: ${Object.values(departmentData).reduce((sum, department) => sum + (department.found || 0), 0)}` },
        {
          text: "\n\n\n_____________________________",
          style: "subheader",
        },
        {
          text: "Generated by: <%=user.name%>",
          style: "subheader",
        },
        ],
        footer: function (currentPage, pageCount) {
            return {
                text: `Page ${currentPage.toString()} of ${pageCount}`,
                alignment: "center",
                margin: [0, 10],
            };
        },
    };

    pdfMake.createPdf(docDefinition).download("department-report.pdf");

    function getItemsDetails(type, department) {
        const items = <%- JSON.stringify(data) %>;
        const filteredItems = items[type.toLowerCase()].filter(item => item.department === department);
        const details = filteredItems.map(item => `Name: ${item.objTitle}\n Category: ${item.category}`).join('\n\n');
        return details;
    }
});
document.getElementById("generateCategory").addEventListener("click", function () {
  const categories = <%- JSON.stringify(categories) %>;

  const docDefinition = {
    content: [
      {
        text: "TECHNOLOGICAL INSTITUTE OF THE PHILIPPINES - OFFICE OF STUDENT AFFAIRS",
        style: "header",
        bold: true,
        fontSize: 16,
        alignment: "center",
      },
      {
        text: "Per Category Report\n\n\n",
        style: "subheader",
        alignment: "center",
      },
      {canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 1 } ]},
      {
        text: "\nPer Category Summary:",
        style: "subheader",
        margin: [0, 10, 0, 5],
      },
      {
        table: {
          headerRows: 1,
          widths: ['auto', 'auto', 'auto', 'auto', 'auto'],
          body: [
            ['Category', 'Lost Item/s', 'Lost Item Details', 'Found Item/s', 'Found Item Details'],
            ...categories.map(category => [
              category,
              getTotalLostItemsByCategory(category),
              getLostItemDetailsByCategory(category),
              getTotalFoundItemsByCategory(category),
              getFoundItemDetailsByCategory(category),
            ]),
          ],
        },
      },
        {
          text: "\n\n\n_____________________________",
          style: "subheader",
        },
        {
          text: "Generated by: <%=user.name%>",
          style: "subheader",
        },
    ],
    footer: function (currentPage, pageCount) {
      return {
        text: `Page ${currentPage.toString()} of ${pageCount}`,
        alignment: "center",
        margin: [0, 10],
      };
    },
  };

  pdfMake.createPdf(docDefinition).download("category-report.pdf");

  function getTotalLostItemsByCategory(category) {
    const lostItems = <%- JSON.stringify(data.lost) %>.filter(item => item.category === category);
    return lostItems.length;
  }

  function getLostItemDetailsByCategory(category) {
    const lostItems = <%- JSON.stringify(data.lost) %>.filter(item => item.category === category);
    const details = lostItems.map(item => `Name: ${item.objTitle} \n Department: ${item.department}`).join('\n\n');
    return details;
  }

  function getTotalFoundItemsByCategory(category) {
    const foundItems = <%- JSON.stringify(data.found) %>.filter(item => item.category === category);
    return foundItems.length;
  }

  function getFoundItemDetailsByCategory(category) {
    const foundItems = <%- JSON.stringify(data.found) %>.filter(item => item.category === category);
    const details = foundItems.map(item => `Name: ${item.objTitle} \n Department: ${item.department}`).join('\n\n');
    return details;
  }
});

  });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
</body>
</html>
